# Online Python compiler (interpreter) to run Python online.
# Write Python 3 code in this online editor and run it.
print("Hello world")
import copy
def printBoard(board):
    for row in board:
        for item in row:
            print(item, end = " ")
        print("\n")

def ambiguity(board, ambiguity_meter):
    l = len(board)
    for row in board: # row ambiguity
        count = 0
        for item in row:
            if item == ".":
                count += 1
        ambiguity_meter[0].append(count)
        
    for i in range(9): # column ambiguity
        count = 0
        for j in range(9):
            if board[j][i] == ".":
                count += 1
        ambiguity_meter[1].append(count)
        
    for xshift in range(3): #quadrant ambiguity
        for yshift in range(3):
            count = 0
            for i in range(3):
                for j in range(3):
                    if board[3*xshift + i][3*yshift + j] == ".":
                        count += 1
            ambiguity_meter[2].append(count)

ambiguity_meter = [[], [], []]
def ambiguity_index(board,ambiguity_meter):
    ''' (2,0) at Q0, (3,3) at Q4, (8,4) at Q7'''
    for i in range(9):
        for j in range(9):
            if board[i][j] != ".":
                board[i][j] = [0,0,0]
            else:
                horizontal = ambiguity_meter[0][i]
                vertical = ambiguity_meter[1][j]
                quadrantical = ambiguity_meter[2][(i//3)*3 + j//3]
                index = [horizontal,vertical,quadrantical]
                index.sort()
                board[i][j] = index
              

def getLeastAmbiguity(boardAmbiguity):
    minAmbiguity = [9,9,9]
    xMin = 0
    yMin = 0
    for i in range(9):
        for j in range(9):
            if boardAmbiguity[i][j] == [0,0,0]:
                continue
            if boardAmbiguity[i][j] < minAmbiguity:
                minAmbiguity = boardAmbiguity[i][j]
                xMin = i
                yMin = j
    return (xMin, yMin) 
    
def possible_list(board,pos):
    taken_list = [] # row 
    for j in range(9):
        if board[pos[0]][j] != "." and board[pos[0]][j] not in taken_list:
            taken_list += [board[pos[0]][j]]
            
    for i in range(9): # column 
        if board[i][pos[1]] != "." and board[i][pos[1]] not in taken_list:
            taken_list += [board[i][pos[1]]]
        
    quad_x = pos[1] // 3
    quad_y = pos[0] // 3

    for i in range(quad_y*3, quad_y*3 + 3): #quadrant
        for j in range(quad_x * 3, quad_x*3 + 3):
            if board[i][j] != "." and board[i][j] not in taken_list:
                taken_list += [board[i][j]]
    
    possible_number = ["1","2","3","4","5","6","7","8","9"]
    for i in taken_list:
        if i in possible_number:
            possible_number.remove(i)
    
    return possible_number
    
board1 = [["5",".",".",".","7",".",".",".","."],
          ["6","7",".","1","9","5",".",".","."],
          [".",".","8",".",".",".",".","6","."],
          ["8",".",".",".","6",".",".",".","."],
          ["4",".",".","8",".","3",".",".","."],
          ["7",".",".",".","2",".",".",".","."],
          [".","6",".",".",".",".","2","8","4"],
          [".",".",".","4","1","9","6","3","5"],
          [".",".",".",".","8",".",".","7","9"]]


board2 = [
         [".",".",".","2","3",".",".",".","."],
         [".","9",".",".",".",".",".","8","."],
         [".",".",".",".",".","6","1",".","."],
         [".",".",".","5",".",".","6",".","2"],
         [".","7","1",".",".",".",".",".","."],
         [".",".",".",".",".",".",".",".","."],
         [".",".",".",".","1","4",".","7","."],
         [".",".",".",".",".",".",".",".","5"],
         [".",".",".",".",".",".",".",".","."]]

board_index = copy.deepcopy(board1)
ambiguity(board_index,ambiguity_meter)
ambiguity_index(board_index,ambiguity_meter)
print(board_index)
print(possible_list(board1,(2,8)))
