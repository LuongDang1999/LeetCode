# Online Python compiler (interpreter) to run Python online.
# Write Python 3 code in this online editor and run it.
print("Hello world")
import copy

def possible_list(self,board,pos):
        if board[pos[0]][pos[1]] != ".":
                return False
        taken_list = [] # row 
        for j in range(9):
            if board[pos[0]][j] != "." and board[pos[0]][j] not in taken_list:
                taken_list += [board[pos[0]][j]]
            
        for i in range(9): # column 
            if board[i][pos[1]] != "." and board[i][pos[1]] not in taken_list:
                taken_list += [board[i][pos[1]]]
        
        quad_x = pos[1] // 3
        quad_y = pos[0] // 3

        for i in range(quad_y*3, quad_y*3 + 3): #quadrant
            for j in range(quad_x * 3, quad_x*3 + 3):
                if board[i][j] != "." and board[i][j] not in taken_list:
                    taken_list += [board[i][j]]
    
        possible_number = ["1","2","3","4","5","6","7","8","9"]
        for i in taken_list:
            if i in possible_number:
                possible_number.remove(i)
    
        return possible_number
    
    def getLeastAmbiguity(self,board):
        minAmbiguity = 9
        xMin = 0
        yMin = 0
        for i in range(9):
            for j in range(9):
                if self.possible_list(board,(i,j)):
                    if len(self.possible_list(board,(i,j))) < minAmbiguity and board[i][j] == ".":
                        minAmbiguity = len(self.possible_list(board,(i,j)))
                        xMin = i
                        yMin = j
        return (xMin, yMin) 
        
    def solveSudoku(self,board):
        find = self.getLeastAmbiguity(board)
        if not find:
            return True
        else:
            (row,col) = find
        legal_move = self.possible_list(board,(row,col))
        if legal_move:
            for i in legal_move:
                board[row][col] = i
                if self.solveSudoku(board):
                    return True 
        return False
